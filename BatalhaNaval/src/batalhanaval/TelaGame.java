/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package batalhanaval;

import java.awt.Color;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.text.DefaultCaret;

/**
 *
 * @author annel
 */
public class TelaGame extends javax.swing.JFrame {
    // simular grid e checar colisões, etc.
    int [][]grid = new int[8][8];
    // verificar se um navio ja foi todo descoberto
    int [][]answer_right = new int[8][8];
    
    // para incluir o acerte duplo do návio
    int qtd_acertos = 0;
    
    Color backButton = new Color(245, 245, 255);
    //Color []shipColor = {Color.BLACK, Color.WHITE, Color.GREEN, Color.BLUE, Color.RED, Color.YELLOW, Color.ORANGE, Color.PINK};
    Color []shipColor = {backButton, backButton, backButton, backButton, backButton, backButton, backButton, backButton};
    
    /**
     * Creates new form TelaGame
     */
    public TelaGame() {
        initComponents();
        drawShips();
        nomeBarcos.setFocusable(false);
        // mudando cor de fundo para branco
        getContentPane().setBackground(new Color (245, 245, 245));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        canvas1 = new java.awt.Canvas();
        squareA1 = new javax.swing.JLabel();
        squareA2 = new javax.swing.JLabel();
        squareA3 = new javax.swing.JLabel();
        squareA4 = new javax.swing.JLabel();
        squareA5 = new javax.swing.JLabel();
        squareA6 = new javax.swing.JLabel();
        squareA7 = new javax.swing.JLabel();
        squareA8 = new javax.swing.JLabel();
        squareB1 = new javax.swing.JLabel();
        squareB2 = new javax.swing.JLabel();
        squareB3 = new javax.swing.JLabel();
        squareB4 = new javax.swing.JLabel();
        squareB5 = new javax.swing.JLabel();
        squareB6 = new javax.swing.JLabel();
        squareB7 = new javax.swing.JLabel();
        squareB8 = new javax.swing.JLabel();
        squareC1 = new javax.swing.JLabel();
        squareC2 = new javax.swing.JLabel();
        squareC3 = new javax.swing.JLabel();
        squareC4 = new javax.swing.JLabel();
        squareC5 = new javax.swing.JLabel();
        squareC6 = new javax.swing.JLabel();
        squareC7 = new javax.swing.JLabel();
        squareC8 = new javax.swing.JLabel();
        squareD1 = new javax.swing.JLabel();
        squareD2 = new javax.swing.JLabel();
        squareD3 = new javax.swing.JLabel();
        squareD4 = new javax.swing.JLabel();
        squareD5 = new javax.swing.JLabel();
        squareD6 = new javax.swing.JLabel();
        squareD7 = new javax.swing.JLabel();
        squareD8 = new javax.swing.JLabel();
        squareE1 = new javax.swing.JLabel();
        squareE2 = new javax.swing.JLabel();
        squareE3 = new javax.swing.JLabel();
        squareE4 = new javax.swing.JLabel();
        squareE5 = new javax.swing.JLabel();
        squareE6 = new javax.swing.JLabel();
        squareE7 = new javax.swing.JLabel();
        squareE8 = new javax.swing.JLabel();
        squareF1 = new javax.swing.JLabel();
        squareF2 = new javax.swing.JLabel();
        squareF3 = new javax.swing.JLabel();
        squareF5 = new javax.swing.JLabel();
        squareF4 = new javax.swing.JLabel();
        squareF6 = new javax.swing.JLabel();
        squareF7 = new javax.swing.JLabel();
        squareF8 = new javax.swing.JLabel();
        squareG1 = new javax.swing.JLabel();
        squareG2 = new javax.swing.JLabel();
        squareG3 = new javax.swing.JLabel();
        squareG5 = new javax.swing.JLabel();
        squareG4 = new javax.swing.JLabel();
        squareG6 = new javax.swing.JLabel();
        squareG7 = new javax.swing.JLabel();
        squareG8 = new javax.swing.JLabel();
        squareH1 = new javax.swing.JLabel();
        squareH2 = new javax.swing.JLabel();
        squareH3 = new javax.swing.JLabel();
        squareH5 = new javax.swing.JLabel();
        squareH4 = new javax.swing.JLabel();
        squareH6 = new javax.swing.JLabel();
        squareH7 = new javax.swing.JLabel();
        squareH8 = new javax.swing.JLabel();
        jLabelShip1 = new javax.swing.JLabel();
        jLabelShip2 = new javax.swing.JLabel();
        jLabelShip3 = new javax.swing.JLabel();
        jLabelShip4 = new javax.swing.JLabel();
        jLabelShip5 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jbRetornar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        nomeBarcos = new java.awt.TextArea();
        jLabel22 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        jLabel1.setText("1");

        jLabel2.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        jLabel2.setText("2");

        jLabel3.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        jLabel3.setText("3");

        jLabel4.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        jLabel4.setText("4");

        jLabel5.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        jLabel5.setText("5");

        jLabel6.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        jLabel6.setText("6");

        jLabel7.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        jLabel7.setText("7");

        jLabel8.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        jLabel8.setText("8");

        jLabel9.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        jLabel9.setText("A");

        jLabel10.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        jLabel10.setText("B");

        jLabel11.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        jLabel11.setText("C");

        jLabel12.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        jLabel12.setText("D");

        jLabel13.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        jLabel13.setText("E");

        jLabel14.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        jLabel14.setText("F");

        jLabel15.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        jLabel15.setText("H");

        jLabel16.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        jLabel16.setText("G");

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white));

        squareA1.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareA1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareA1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareA1.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareA1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareA1MouseClicked(evt);
            }
        });

        squareA2.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareA2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareA2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareA2.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareA2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareA2MouseClicked(evt);
            }
        });

        squareA3.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareA3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareA3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareA3.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareA3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareA3MouseClicked(evt);
            }
        });

        squareA4.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareA4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareA4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareA4.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareA4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareA4MouseClicked(evt);
            }
        });

        squareA5.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareA5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareA5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareA5.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareA5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareA5MouseClicked(evt);
            }
        });

        squareA6.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareA6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareA6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareA6.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareA6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareA6MouseClicked(evt);
            }
        });

        squareA7.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareA7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareA7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareA7.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareA7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareA7MouseClicked(evt);
            }
        });

        squareA8.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareA8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareA8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareA8.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareA8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareA8MouseClicked(evt);
            }
        });

        squareB1.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareB1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareB1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareB1.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareB1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareB1MouseClicked(evt);
            }
        });

        squareB2.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareB2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareB2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareB2.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareB2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareB2MouseClicked(evt);
            }
        });
        squareB2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                squareB2KeyPressed(evt);
            }
        });

        squareB3.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareB3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareB3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareB3.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareB3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareB3MouseClicked(evt);
            }
        });

        squareB4.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareB4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareB4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareB4.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareB4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareB4MouseClicked(evt);
            }
        });

        squareB5.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareB5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareB5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareB5.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareB5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareB5MouseClicked(evt);
            }
        });

        squareB6.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareB6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareB6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareB6.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareB6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareB6MouseClicked(evt);
            }
        });

        squareB7.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareB7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareB7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareB7.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareB7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareB7MouseClicked(evt);
            }
        });

        squareB8.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareB8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareB8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareB8.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareB8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareB8MouseClicked(evt);
            }
        });

        squareC1.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareC1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareC1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareC1.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareC1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareC1MouseClicked(evt);
            }
        });

        squareC2.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareC2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareC2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareC2.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareC2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareC2MouseClicked(evt);
            }
        });

        squareC3.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareC3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareC3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareC3.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareC3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareC3MouseClicked(evt);
            }
        });

        squareC4.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareC4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareC4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareC4.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareC4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareC4MouseClicked(evt);
            }
        });

        squareC5.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareC5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareC5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareC5.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareC5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareC5MouseClicked(evt);
            }
        });

        squareC6.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareC6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareC6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareC6.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareC6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareC6MouseClicked(evt);
            }
        });

        squareC7.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareC7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareC7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareC7.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareC7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareC7MouseClicked(evt);
            }
        });

        squareC8.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareC8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareC8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareC8.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareC8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareC8MouseClicked(evt);
            }
        });

        squareD1.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareD1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareD1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareD1.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareD1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareD1MouseClicked(evt);
            }
        });

        squareD2.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareD2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareD2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareD2.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareD2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareD2MouseClicked(evt);
            }
        });

        squareD3.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareD3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareD3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareD3.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareD3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareD3MouseClicked(evt);
            }
        });

        squareD4.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareD4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareD4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareD4.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareD4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareD4MouseClicked(evt);
            }
        });

        squareD5.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareD5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareD5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareD5.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareD5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareD5MouseClicked(evt);
            }
        });

        squareD6.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareD6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareD6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareD6.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareD6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareD6MouseClicked(evt);
            }
        });

        squareD7.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareD7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareD7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareD7.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareD7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareD7MouseClicked(evt);
            }
        });

        squareD8.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareD8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareD8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareD8.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareD8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareD8MouseClicked(evt);
            }
        });

        squareE1.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareE1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareE1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareE1.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareE1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareE1MouseClicked(evt);
            }
        });

        squareE2.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareE2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareE2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareE2.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareE2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareE2MouseClicked(evt);
            }
        });

        squareE3.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareE3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareE3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareE3.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareE3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareE3MouseClicked(evt);
            }
        });

        squareE4.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareE4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareE4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareE4.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareE4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareE4MouseClicked(evt);
            }
        });

        squareE5.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareE5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareE5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareE5.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareE5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareE5MouseClicked(evt);
            }
        });

        squareE6.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareE6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareE6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareE6.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareE6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareE6MouseClicked(evt);
            }
        });

        squareE7.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareE7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareE7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareE7.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareE7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareE7MouseClicked(evt);
            }
        });

        squareE8.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareE8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareE8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareE8.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareE8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareE8MouseClicked(evt);
            }
        });

        squareF1.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareF1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareF1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareF1.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareF1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareF1MouseClicked(evt);
            }
        });

        squareF2.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareF2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareF2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareF2.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareF2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareF2MouseClicked(evt);
            }
        });

        squareF3.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareF3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareF3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareF3.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareF3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareF3MouseClicked(evt);
            }
        });

        squareF5.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareF5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareF5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareF5.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareF5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareF5MouseClicked(evt);
            }
        });

        squareF4.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareF4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareF4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareF4.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareF4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareF4MouseClicked(evt);
            }
        });

        squareF6.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareF6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareF6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareF6.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareF6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareF6MouseClicked(evt);
            }
        });

        squareF7.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareF7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareF7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareF7.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareF7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareF7MouseClicked(evt);
            }
        });

        squareF8.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareF8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareF8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareF8.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareF8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareF8MouseClicked(evt);
            }
        });

        squareG1.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareG1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareG1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareG1.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareG1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareG1MouseClicked(evt);
            }
        });

        squareG2.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareG2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareG2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareG2.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareG2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareG2MouseClicked(evt);
            }
        });

        squareG3.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareG3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareG3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareG3.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareG3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareG3MouseClicked(evt);
            }
        });

        squareG5.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareG5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareG5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareG5.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareG5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareG5MouseClicked(evt);
            }
        });

        squareG4.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareG4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareG4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareG4.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareG4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareG4MouseClicked(evt);
            }
        });

        squareG6.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareG6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareG6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareG6.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareG6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareG6MouseClicked(evt);
            }
        });

        squareG7.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareG7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareG7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareG7.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareG7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareG7MouseClicked(evt);
            }
        });

        squareG8.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareG8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareG8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareG8.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareG8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareG8MouseClicked(evt);
            }
        });

        squareH1.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareH1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareH1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareH1.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareH1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareH1MouseClicked(evt);
            }
        });

        squareH2.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareH2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareH2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareH2.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareH2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareH2MouseClicked(evt);
            }
        });

        squareH3.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareH3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareH3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareH3.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareH3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareH3MouseClicked(evt);
            }
        });

        squareH5.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareH5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareH5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareH5.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareH5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareH5MouseClicked(evt);
            }
        });

        squareH4.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareH4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareH4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareH4.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareH4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareH4MouseClicked(evt);
            }
        });

        squareH6.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareH6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareH6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareH6.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareH6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareH6MouseClicked(evt);
            }
        });

        squareH7.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareH7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareH7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareH7.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareH7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareH7MouseClicked(evt);
            }
        });

        squareH8.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        squareH8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        squareH8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        squareH8.setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        squareH8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                squareH8MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(squareD1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addComponent(squareD2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addComponent(squareD3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addComponent(squareD4, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addComponent(squareD5, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addComponent(squareD6, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addComponent(squareD7, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addComponent(squareD8, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(squareA1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(squareA2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(squareA3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(squareA4, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(squareA5, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(squareA6, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(squareA7, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(squareA8, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(squareB1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(squareB2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(squareB3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(squareB4, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(squareB5, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(squareB6, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(squareB7, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(squareB8, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(squareC1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(squareC2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(squareC3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(squareC4, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(squareC5, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(squareC6, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(squareC7, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(squareC8, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(squareE1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(squareE2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(squareE3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(squareE4, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(squareE5, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(squareE6, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(squareE7, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(squareE8, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(squareF1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(squareF2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(squareF3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(squareF4, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(squareF5, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(squareF6, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(squareF7, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(squareF8, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(squareH1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(squareH2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(squareH3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(squareH4, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(squareH5, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(squareH6, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(squareH7, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(squareH8, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(squareG1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(squareG2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(squareG3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(squareG4, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(squareG5, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(squareG6, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(squareG7, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(squareG8, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(squareA2, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                    .addComponent(squareA1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareA3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareA4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareA5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareA6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareA7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareA8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(squareB2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareB1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareB3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareB4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareB5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareB6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareB7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareB8, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(squareC2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareC1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareC3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareC4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareC5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareC6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareC7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareC8, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(squareD2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareD1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareD3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareD4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareD5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareD6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareD7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareD8, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(squareE2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareE1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareE3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareE4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareE5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareE6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareE7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareE8, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(squareF2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareF1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareF3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareF4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareF5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareF6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareF7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(squareF8, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(96, 96, 96))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(squareG2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(squareG1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(squareG3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(squareG4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(squareG5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(squareG6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(squareG7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(squareG8, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, 0)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(squareH2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(squareH1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(squareH3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(squareH4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(squareH5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(squareH6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(squareH7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(squareH8, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        jLabelShip1.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabelShip1.setText("0/2");

        jLabelShip2.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabelShip2.setText("0/2");

        jLabelShip3.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabelShip3.setText("0/2");

        jLabelShip4.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabelShip4.setText("0/1");

        jLabelShip5.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabelShip5.setText("0/1");

        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/full_ship1.png"))); // NOI18N

        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/full_ship2.png"))); // NOI18N

        jLabel19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/full_ship3.png"))); // NOI18N

        jLabel20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/full_ship4.png"))); // NOI18N

        jLabel21.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/full_ship5.png"))); // NOI18N

        jbRetornar.setBackground(new java.awt.Color(255, 255, 255));
        jbRetornar.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        jbRetornar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/return_icon.png"))); // NOI18N
        jbRetornar.setText("Retornar");
        jbRetornar.setAlignmentY(0.9F);
        jbRetornar.setBorder(null);
        jbRetornar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jbRetornar.setFocusPainted(false);
        jbRetornar.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jbRetornar.setIconTextGap(9);
        jbRetornar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jbRetornarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jbRetornarMouseExited(evt);
            }
        });
        jbRetornar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRetornarActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        nomeBarcos.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        nomeBarcos.setEditable(false);
        nomeBarcos.setFont(new java.awt.Font("Trebuchet MS", 1, 15)); // NOI18N
        nomeBarcos.setRows(9);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nomeBarcos, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(nomeBarcos, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel22.setText("Barcos");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(250, 250, 250)
                .addComponent(jbRetornar, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(jLabelShip1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel9)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addComponent(jLabel1)
                                .addGap(29, 29, 29)
                                .addComponent(jLabel2)
                                .addGap(29, 29, 29)
                                .addComponent(jLabel3)
                                .addGap(29, 29, 29)
                                .addComponent(jLabel4)
                                .addGap(29, 29, 29)
                                .addComponent(jLabel5)
                                .addGap(29, 29, 29)
                                .addComponent(jLabel6)
                                .addGap(29, 29, 29)
                                .addComponent(jLabel7)
                                .addGap(29, 29, 29)
                                .addComponent(jLabel8))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel19)
                                        .addGap(51, 51, 51)
                                        .addComponent(jLabel20)
                                        .addGap(48, 48, 48)
                                        .addComponent(jLabel21))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(69, 69, 69)
                                                .addComponent(jLabelShip2)
                                                .addGap(96, 96, 96)
                                                .addComponent(jLabelShip3)
                                                .addGap(112, 112, 112)
                                                .addComponent(jLabelShip4)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(64, 64, 64)
                                                .addComponent(jLabel22))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabelShip5)
                                                .addGap(44, 44, 44))))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jLabel17)
                        .addGap(50, 50, 50)
                        .addComponent(jLabel18)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jLabel9)
                        .addGap(15, 15, 15)
                        .addComponent(jLabel10)
                        .addGap(15, 15, 15)
                        .addComponent(jLabel11)
                        .addGap(13, 13, 13)
                        .addComponent(jLabel12)
                        .addGap(13, 13, 13)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel15))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jLabel22)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelShip1)
                    .addComponent(jLabelShip2)
                    .addComponent(jLabelShip3)
                    .addComponent(jLabelShip4)
                    .addComponent(jLabelShip5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                        .addComponent(jLabel19)
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jbRetornar, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                .addGap(17, 17, 17))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void squareA1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareA1MouseClicked
        // mudar a cor do quadrado quando clicado, se cor for a padrão, inserir um x,
        // caso contrário, mostrar a cor do navio no quadrado
        // da para trocar toda essa condição abaixo para squareA1[0][0] == 0, que também sinaliza que não há návio
        if(grid[0][0] == 0)
           squareA1.setText("X");
        else {
           if(answer_right[0][0] == 0)
                answer_right[0][0] = 1;
           // quadrados coloridos utilizando array shipcolor, mas para deixar
           // padrão, foi utilizado outro vetor com uma cor proxima do branco para todas as posições
           squareA1.setBackground(shipColor[grid[0][0]-1]);
           squareA1.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareA1MouseClicked

    private void squareA2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareA2MouseClicked
        // mudar a cor do quadrado quando clicado, se cor for a padrão, inserir um x,
        // caso contrário, mostrar a cor do navio no quadrado
        if(grid[0][1] == 0)
            squareA2.setText("X");
        else {
           if(answer_right[0][1] == 0)
                answer_right[0][1] = 1;
           squareA2.setBackground(shipColor[grid[0][1]-1]);
           squareA2.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareA2MouseClicked

    private void squareA3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareA3MouseClicked
        // mudar a cor do quadrado quando clicado, se cor for a padrão, inserir um x,
        // caso contrário, mostrar a cor do navio no quadrado
        if(grid[0][2] == 0)
           squareA3.setText("X");
        else{
           if(answer_right[0][2] == 0)
                answer_right[0][2] = 1;
           squareA3.setBackground(shipColor[grid[0][2]-1]);
           squareA3.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareA3MouseClicked

    private void squareA4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareA4MouseClicked
        // TODO add your handling code here:
        // mudar a cor do quadrado quando clicado, se cor for a padrão, inserir um x,
        // caso contrário, mostrar a cor do navio no quadrado
        if(grid[0][3] == 0)
           squareA4.setText("X");
        else {
           if(answer_right[0][3] == 0)
                answer_right[0][3] = 1;
           squareA4.setBackground(shipColor[grid[0][3]-1]);
           squareA4.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareA4MouseClicked

    private void squareA5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareA5MouseClicked
        // TODO add your handling code here:
        // mudar a cor do quadrado quando clicado, se cor for a padrão, inserir um x,
        // caso contrário, mostrar a cor do navio no quadrado
        if(grid[0][4] == 0)
           squareA5.setText("X");
        else {
           if(answer_right[0][4] == 0)
                answer_right[0][4] = 1;
           squareA5.setBackground(shipColor[grid[0][4]-1]);
           squareA5.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareA5MouseClicked

    private void squareA6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareA6MouseClicked
        // TODO add your handling code here:
        // mudar a cor do quadrado quando clicado, se cor for a padrão, inserir um x,
        // caso contrário, mostrar a cor do navio no quadrado
        if(grid[0][5] == 0)
           squareA6.setText("X");
        else {
           if(answer_right[0][5] == 0)
                answer_right[0][5] = 1;
           squareA6.setBackground(shipColor[grid[0][5]-1]);
           squareA6.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareA6MouseClicked

    private void squareA7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareA7MouseClicked
        // TODO add your handling code here:
        // mudar a cor do quadrado quando clicado, se cor for a padrão, inserir um x,
        // caso contrário, mostrar a cor do navio no quadrado
        if(grid[0][6] == 0)
           squareA7.setText("X");
        else {
           if(answer_right[0][6] == 0)
                answer_right[0][6] = 1;
           squareA7.setBackground(shipColor[grid[0][6]-1]);
           squareA7.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareA7MouseClicked

    private void squareA8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareA8MouseClicked
        // TODO add your handling code here:
        // mudar a cor do quadrado quando clicado, se cor for a padrão, inserir um x,
        // caso contrário, mostrar a cor do navio no quadrado
        if(grid[0][7] == 0)
           squareA8.setText("X");
        else {
           if(answer_right[0][7] == 0)
                answer_right[0][7] = 1;
           squareA8.setBackground(shipColor[grid[0][7]-1]);
           squareA8.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareA8MouseClicked

    private void squareB1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareB1MouseClicked
        // TODO add your handling code here:
        // mudar a cor do quadrado quando clicado, se cor for a padrão, inserir um x,
        // caso contrário, mostrar a cor do navio no quadrado
        if(grid[1][0] == 0)
           squareB1.setText("X");
        else {
           if(answer_right[1][0] == 0)
                answer_right[1][0] = 1;
           squareB1.setBackground(shipColor[grid[1][0]-1]);
           squareB1.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareB1MouseClicked

    private void squareB2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_squareB2KeyPressed
        
    }//GEN-LAST:event_squareB2KeyPressed

    private void squareB3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareB3MouseClicked
        // TODO add your handling code here:
        // mudar a cor do quadrado quando clicado, se cor for a padrão, inserir um x,
        // caso contrário, mostrar a cor do navio no quadrado
        if(grid[1][2] == 0)
           squareB3.setText("X");
        else {
           if(answer_right[1][2] == 0)
                answer_right[1][2] = 1;
           squareB3.setBackground(shipColor[grid[1][2]-1]);
           squareB3.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareB3MouseClicked

    private void squareB4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareB4MouseClicked
        // TODO add your handling code here:
        // mudar a cor do quadrado quando clicado, se cor for a padrão, inserir um x,
        // caso contrário, mostrar a cor do navio no quadrado
        if(grid[1][3] == 0)
           squareB4.setText("X");
        else {
           if(answer_right[1][3] == 0)
                answer_right[1][3] = 1;
           squareB4.setBackground(shipColor[grid[1][3]-1]);
           squareB4.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareB4MouseClicked

    private void squareB5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareB5MouseClicked
        // TODO add your handling code here:
        // mudar a cor do quadrado quando clicado, se cor for a padrão, inserir um x,
        // caso contrário, mostrar a cor do navio no quadrado
        if(grid[1][4] == 0)
           squareB5.setText("X");
        else {
           if(answer_right[1][4] == 0)
                answer_right[1][4] = 1;
           squareB5.setBackground(shipColor[grid[1][4]-1]);
           squareB5.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareB5MouseClicked

    private void squareB6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareB6MouseClicked
        // TODO add your handling code here:
        // mudar a cor do quadrado quando clicado, se cor for a padrão, inserir um x,
        // caso contrário, mostrar a cor do navio no quadrado
        if(grid[1][5] == 0)
           squareB6.setText("X");
        else {
           if(answer_right[1][5] == 0)
                answer_right[1][5] = 1;
           squareB6.setBackground(shipColor[grid[1][5]-1]);
           squareB6.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareB6MouseClicked

    private void squareB7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareB7MouseClicked
        // TODO add your handling code here:
        // mudar a cor do quadrado quando clicado, se cor for a padrão, inserir um x,
        // caso contrário, mostrar a cor do navio no quadrado
        if(grid[1][6] == 0)
           squareB7.setText("X");
        else {
           if(answer_right[1][6] == 0)
                answer_right[1][6] = 1;
           squareB7.setBackground(shipColor[grid[1][6]-1]);
           squareB7.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareB7MouseClicked

    private void squareB8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareB8MouseClicked
        // TODO add your handling code here:
        // mudar a cor do quadrado quando clicado, se cor for a padrão, inserir um x,
        // caso contrário, mostrar a cor do navio no quadrado
        if(grid[1][7] == 0)
           squareB8.setText("X");
        else {
           if(answer_right[1][7] == 0)
                answer_right[1][7] = 1;
           squareB8.setBackground(shipColor[grid[1][7]-1]);
           squareB8.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareB8MouseClicked

    private void squareB2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareB2MouseClicked
        // TODO add your handling code here:
        // TODO add your handling code here:
        // mudar a cor do quadrado quando clicado, se cor for a padrão, inserir um x,
        // caso contrário, mostrar a cor do navio no quadrado
        if(grid[1][1] == 0)
           squareB2.setText("X");
        else {
           if(answer_right[1][1] == 0)
                answer_right[1][1] = 1;
           squareB2.setBackground(shipColor[grid[1][1]-1]);
           squareB2.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareB2MouseClicked

    private void squareC1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareC1MouseClicked
        // TODO add your handling code here:
        // mudar a cor do quadrado quando clicado, se cor for a padrão, inserir um x,
        // caso contrário, mostrar a cor do navio no quadrado
        if(grid[2][0] == 0)
           squareC1.setText("X");
        else {
           if(answer_right[2][0] == 0)
                answer_right[2][0] = 1;
           squareC1.setBackground(shipColor[grid[2][0]-1]);
           squareC1.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareC1MouseClicked

    private void squareC2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareC2MouseClicked
        // TODO add your handling code here:
        if(grid[2][1] == 0)
           squareC2.setText("X");
        else {
           if(answer_right[2][1] == 0)
                answer_right[2][1] = 1;
           squareC2.setBackground(shipColor[grid[2][1]-1]);
           squareC2.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareC2MouseClicked

    private void squareC3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareC3MouseClicked
        // TODO add your handling code here:
        if(grid[2][2] == 0)
           squareC3.setText("X");
        else {
           if(answer_right[2][2] == 0)
                answer_right[2][2] = 1;
           squareC3.setBackground(shipColor[grid[2][2]-1]);
           squareC3.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareC3MouseClicked

    private void squareC4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareC4MouseClicked
        // TODO add your handling code here:
        if(grid[2][3] == 0)
           squareC4.setText("X");
        else {
           if(answer_right[2][3] == 0)
                answer_right[2][3] = 1;
           squareC4.setBackground(shipColor[grid[2][3]-1]);
           squareC4.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareC4MouseClicked

    private void squareC5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareC5MouseClicked
        // TODO add your handling code here:
        if(grid[2][4] == 0)
           squareC5.setText("X");
        else {
           if(answer_right[2][4] == 0)
                answer_right[2][4] = 1;
           squareC5.setBackground(shipColor[grid[2][4]-1]);
           squareC5.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareC5MouseClicked

    private void squareC6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareC6MouseClicked
        // TODO add your handling code here:
        if(grid[2][5] == 0)
           squareC6.setText("X");
        else {
           if(answer_right[2][5] == 0)
                answer_right[2][5] = 1;
           squareC6.setBackground(shipColor[grid[2][5]-1]);
           squareC6.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareC6MouseClicked

    private void squareC7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareC7MouseClicked
        // TODO add your handling code here:
        if(grid[2][6] == 0)
           squareC7.setText("X");
        else {
           if(answer_right[2][6] == 0)
                answer_right[2][6] = 1;
           squareC7.setBackground(shipColor[grid[2][6]-1]);
           squareC7.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareC7MouseClicked

    private void squareC8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareC8MouseClicked
        // TODO add your handling code here:
        if(grid[2][7] == 0)
           squareC8.setText("X");
        else {
           if(answer_right[2][7] == 0)
                answer_right[2][7] = 1;
           squareC8.setBackground(shipColor[grid[2][7]-1]);
           squareC8.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareC8MouseClicked

    private void squareD1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareD1MouseClicked
        // TODO add your handling code here:
        if(grid[3][0] == 0)
           squareD1.setText("X");
        else {
           if(answer_right[3][0] == 0)
                answer_right[3][0] = 1;
           squareD1.setBackground(shipColor[grid[3][0]-1]);
           squareD1.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareD1MouseClicked

    private void squareD2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareD2MouseClicked
        // TODO add your handling code here:
        if(grid[3][1] == 0)
           squareD2.setText("X");
        else {
           if(answer_right[3][1] == 0)
                answer_right[3][1] = 1;
           squareD2.setBackground(shipColor[grid[3][1]-1]);
           squareD2.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareD2MouseClicked

    private void squareD3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareD3MouseClicked
        // TODO add your handling code here:
        if(grid[3][2] == 0)
           squareD3.setText("X");
        else {
           if(answer_right[3][2] == 0)
                answer_right[3][2] = 1;
           squareD3.setBackground(shipColor[grid[3][2]-1]);
           squareD3.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareD3MouseClicked

    private void squareD4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareD4MouseClicked
        // TODO add your handling code here:
        if(grid[3][3] == 0)
           squareD4.setText("X");
        else {
           if(answer_right[3][3] == 0)
                answer_right[3][3] = 1;
           squareD4.setBackground(shipColor[grid[3][3]-1]);
           squareD4.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareD4MouseClicked

    private void squareD5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareD5MouseClicked
        // TODO add your handling code here:
        if(grid[3][4] == 0)
           squareD5.setText("X");
        else {
           if(answer_right[3][4] == 0)
                answer_right[3][4] = 1;
           squareD5.setBackground(shipColor[grid[3][4]-1]);
           squareD5.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareD5MouseClicked

    private void squareD6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareD6MouseClicked
        // TODO add your handling code here:
        if(grid[3][5] == 0)
           squareD6.setText("X");
        else {
           if(answer_right[3][5] == 0)
                answer_right[3][5] = 1;
           squareD6.setBackground(shipColor[grid[3][5]-1]);
           squareD6.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareD6MouseClicked

    private void squareD7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareD7MouseClicked
        // TODO add your handling code here:
        if(grid[3][6] == 0)
           squareD7.setText("X");
        else {
           if(answer_right[3][6] == 0)
                answer_right[3][6] = 1;
           squareD7.setBackground(shipColor[grid[3][6]-1]);
           squareD7.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareD7MouseClicked

    private void squareD8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareD8MouseClicked
        // TODO add your handling code here:
        if(grid[3][7] == 0)
           squareD8.setText("X");
        else {
           if(answer_right[3][7] == 0)
                answer_right[3][7] = 1;
           squareD8.setBackground(shipColor[grid[3][7]-1]);
           squareD8.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareD8MouseClicked

    private void squareE1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareE1MouseClicked
        // TODO add your handling code here:
        if(grid[4][0] == 0)
           squareE1.setText("X");
        else {
           if(answer_right[4][0] == 0)
                answer_right[4][0] = 1;
           squareE1.setBackground(shipColor[grid[4][0]-1]);
           squareE1.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareE1MouseClicked

    private void squareE2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareE2MouseClicked
        // TODO add your handling code here:
        if(grid[4][1] == 0)
           squareE2.setText("X");
        else {
           if(answer_right[4][1] == 0)
                answer_right[4][1] = 1;
           squareE2.setBackground(shipColor[grid[4][1]-1]);
           squareE2.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareE2MouseClicked

    private void squareE3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareE3MouseClicked
        // TODO add your handling code here:
        if(grid[4][2] == 0)
           squareE3.setText("X");
        else {
           if(answer_right[4][2] == 0)
                answer_right[4][2] = 1;
           squareE3.setBackground(shipColor[grid[4][2]-1]);
           squareE3.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareE3MouseClicked

    private void squareE4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareE4MouseClicked
        // TODO add your handling code here:
        if(grid[4][3] == 0)
           squareE4.setText("X");
        else {
           if(answer_right[4][3] == 0)
                answer_right[4][3] = 1;
           squareE4.setBackground(shipColor[grid[4][3]-1]);
           squareE4.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareE4MouseClicked

    private void squareE5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareE5MouseClicked
        // TODO add your handling code here:
        if(grid[4][4] == 0)
           squareE5.setText("X");
        else {
           if(answer_right[4][4] == 0)
                answer_right[4][4] = 1;
           squareE5.setBackground(shipColor[grid[4][4]-1]);
           squareE5.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareE5MouseClicked

    private void squareE6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareE6MouseClicked
        // TODO add your handling code here:
        if(grid[4][5] == 0)
           squareE6.setText("X");
        else {
           if(answer_right[4][5] == 0)
                answer_right[4][5] = 1;
           squareE6.setBackground(shipColor[grid[4][5]-1]);
           squareE6.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareE6MouseClicked

    private void squareE7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareE7MouseClicked
        // TODO add your handling code here:
        if(grid[4][6] == 0)
           squareE7.setText("X");
        else {
           if(answer_right[4][6] == 0)
                answer_right[4][6] = 1;
           squareE7.setBackground(shipColor[grid[4][6]-1]);
           squareE7.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareE7MouseClicked

    private void squareE8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareE8MouseClicked
        // TODO add your handling code here:
        if(grid[4][7] == 0)
           squareE8.setText("X");
        else {
           if(answer_right[4][7] == 0)
                answer_right[4][7] = 1;
           squareE8.setBackground(shipColor[grid[4][7]-1]);
           squareE8.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareE8MouseClicked

    private void squareF2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareF2MouseClicked
        // TODO add your handling code here:
        if(grid[5][1] == 0)
           squareF2.setText("X");
        else {
           if(answer_right[5][1] == 0)
                answer_right[5][1] = 1;
           squareF2.setBackground(shipColor[grid[5][1]-1]);
           squareF2.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareF2MouseClicked

    private void squareF1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareF1MouseClicked
        // TODO add your handling code here:
        if(grid[5][0] == 0)
           squareF1.setText("X");
        else {
           if(answer_right[5][0] == 0)
                answer_right[5][0] = 1;
           squareF1.setBackground(shipColor[grid[5][0]-1]);
           squareF1.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareF1MouseClicked

    private void squareF3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareF3MouseClicked
        // TODO add your handling code here:
        if(grid[5][2] == 0)
           squareF3.setText("X");
        else {
           if(answer_right[5][2] == 0)
                answer_right[5][2] = 1;
           squareF3.setBackground(shipColor[grid[5][2]-1]);
           squareF3.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareF3MouseClicked

    private void squareF4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareF4MouseClicked
        // TODO add your handling code here:
        if(grid[5][3] == 0)
           squareF4.setText("X");
        else {
           if(answer_right[5][3] == 0)
                answer_right[5][3] = 1;
           squareF4.setBackground(shipColor[grid[5][3]-1]);
           squareF4.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareF4MouseClicked

    private void squareF5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareF5MouseClicked
        // TODO add your handling code here:
        if(grid[5][4] == 0)
           squareF5.setText("X");
        else {
           if(answer_right[5][4] == 0)
                answer_right[5][4] = 1;
           squareF5.setBackground(shipColor[grid[5][4]-1]);
           squareF5.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareF5MouseClicked

    private void squareF6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareF6MouseClicked
        // TODO add your handling code here:
        if(grid[5][5] == 0)
           squareF6.setText("X");
        else {
           if(answer_right[5][5] == 0)
                answer_right[5][5] = 1;
           squareF6.setBackground(shipColor[grid[5][5]-1]);
           squareF6.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareF6MouseClicked

    private void squareF7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareF7MouseClicked
        // TODO add your handling code here:
        if(grid[5][6] == 0)
           squareF7.setText("X");
        else {
           if(answer_right[5][6] == 0)
                answer_right[5][6] = 1;
           squareF7.setBackground(shipColor[grid[5][6]-1]);
           squareF7.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareF7MouseClicked

    private void squareF8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareF8MouseClicked
        // TODO add your handling code here:
        if(grid[5][7] == 0)
           squareF8.setText("X");
        else {
           if(answer_right[5][7] == 0)
                answer_right[5][7] = 1;
           squareF8.setBackground(shipColor[grid[5][7]-1]);
           squareF8.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareF8MouseClicked

    private void squareG1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareG1MouseClicked
        // TODO add your handling code here:
        if(grid[6][0] == 0)
           squareG1.setText("X");
        else {
           if(answer_right[6][0] == 0)
                answer_right[6][0] = 1;
           squareG1.setBackground(shipColor[grid[6][0]-1]);
           squareG1.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareG1MouseClicked

    private void squareG2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareG2MouseClicked
        // TODO add your handling code here:
        if(grid[6][1] == 0)
           squareG2.setText("X");
        else {
           if(answer_right[6][1] == 0)
                answer_right[6][1] = 1;
           squareG2.setBackground(shipColor[grid[6][1]-1]);
           squareG2.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareG2MouseClicked

    private void squareG3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareG3MouseClicked
        // TODO add your handling code here:
        if(grid[6][2] == 0)
           squareG3.setText("X");
        else {
           if(answer_right[6][2] == 0)
                answer_right[6][2] = 1;
           squareG3.setBackground(shipColor[grid[6][2]-1]);
           squareG3.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareG3MouseClicked

    private void squareG4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareG4MouseClicked
        // TODO add your handling code here:
        if(grid[6][3] == 0)
           squareG4.setText("X");
        else {
           if(answer_right[6][3] == 0)
                answer_right[6][3] = 1;
           squareG4.setBackground(shipColor[grid[6][3]-1]);
           squareG4.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareG4MouseClicked

    private void squareG5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareG5MouseClicked
        // TODO add your handling code here:
        if(grid[6][4] == 0)
           squareG5.setText("X");
        else {
            if(answer_right[6][4] == 0)
                answer_right[6][4] = 1;
           squareG5.setBackground(shipColor[grid[6][4]-1]);
           squareG5.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareG5MouseClicked

    private void squareG6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareG6MouseClicked
        // TODO add your handling code here:
        if(grid[6][5] == 0)
           squareG6.setText("X");
        else {
           if(answer_right[6][5] == 0)
                answer_right[6][5] = 1;
           squareG6.setBackground(shipColor[grid[6][5]-1]);
           squareG6.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareG6MouseClicked

    private void squareG7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareG7MouseClicked
        // TODO add your handling code here:
        if(grid[6][6] == 0)
           squareG7.setText("X");
        else {
           if(answer_right[6][6] == 0)
                answer_right[6][6] = 1;
           squareG7.setBackground(shipColor[grid[6][6]-1]);
           squareG7.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareG7MouseClicked

    private void squareG8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareG8MouseClicked
        // TODO add your handling code here:
        if(grid[6][7] == 0)
           squareG8.setText("X");
        else {
           if(answer_right[6][7] == 0)
                answer_right[6][7] = 1;
           squareG8.setBackground(shipColor[grid[6][7]-1]);
           squareG8.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareG8MouseClicked

    private void squareH1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareH1MouseClicked
        // TODO add your handling code here:
        if(grid[7][0] == 0)
           squareH1.setText("X");
        else {
           if(answer_right[7][0] == 0)
                answer_right[7][0] = 1;
           squareH1.setBackground(shipColor[grid[7][0]-1]);
           squareH1.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareH1MouseClicked

    private void squareH2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareH2MouseClicked
        // TODO add your handling code here:
        if(grid[7][1] == 0)
           squareH2.setText("X");
        else {
           if(answer_right[7][1] == 0)
                answer_right[7][1] = 1;
           squareH2.setBackground(shipColor[grid[7][1]-1]);
           squareH2.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareH2MouseClicked

    private void squareH3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareH3MouseClicked
        // TODO add your handling code here:
        if(grid[7][2] == 0)
           squareH3.setText("X");
        else {
           if(answer_right[7][2] == 0)
                answer_right[7][2] = 1;
           squareH3.setBackground(shipColor[grid[7][2]-1]);
           squareH3.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareH3MouseClicked

    private void squareH4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareH4MouseClicked
        // TODO add your handling code here:
        if(grid[7][3] == 0)
           squareH4.setText("X");
        else {
           if(answer_right[7][3] == 0)
                answer_right[7][3] = 1;
           squareH4.setBackground(shipColor[grid[7][3]-1]);
           squareH4.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareH4MouseClicked

    private void squareH5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareH5MouseClicked
        // TODO add your handling code here:
        if(grid[7][4] == 0)
           squareH5.setText("X");
        else {
           if(answer_right[7][4] == 0)
                answer_right[7][4] = 1;
           squareH5.setBackground(shipColor[grid[7][4]-1]);
           squareH5.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareH5MouseClicked

    private void squareH6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareH6MouseClicked
        // TODO add your handling code here:
        if(grid[7][5] == 0)
           squareH6.setText("X");
        else {
           if(answer_right[7][5] == 0)
                answer_right[7][5] = 1;
           squareH6.setBackground(shipColor[grid[7][5]-1]);
           squareH6.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareH6MouseClicked

    private void squareH7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareH7MouseClicked
        // TODO add your handling code here:
        if(grid[7][6] == 0)
           squareH7.setText("X");
        else {
           if(answer_right[7][6] == 0)
                answer_right[7][6] = 1;
           squareH7.setBackground(shipColor[grid[7][6]-1]);
           squareH7.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareH7MouseClicked

    private void squareH8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_squareH8MouseClicked
        // TODO add your handling code here:
        if(grid[7][7] == 0)
           squareH8.setText("X");
        else {
           if(answer_right[7][7] == 0)
               answer_right[7][7] = 1;
           squareH8.setBackground(shipColor[grid[7][7]-1]);
           squareH8.setOpaque(true);
        }
        insertShipImage();
    }//GEN-LAST:event_squareH8MouseClicked

    private void jbRetornarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRetornarActionPerformed
        // TODO add your handling code here:  
        TelaInicial ti = new TelaInicial();
        ti.setVisible(true);
        dispose();
    }//GEN-LAST:event_jbRetornarActionPerformed

    private void jbRetornarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbRetornarMouseEntered
        // TODO add your handling code here:
        jbRetornar.setBackground(new Color(255,153,0));
    }//GEN-LAST:event_jbRetornarMouseEntered

    private void jbRetornarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbRetornarMouseExited
        // TODO add your handling code here:
        jbRetornar.setBackground(Color.WHITE);
    }//GEN-LAST:event_jbRetornarMouseExited
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaGame().setVisible(true);
            }
        });
    }
    
    // para para inserir a imagem dos ships quando eles estiverem completos
    public void insertShipImage() {
        
        System.out.println("GRid\n\n");
        for(int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                System.out.print(grid[i][j] + " ");
            }
            System.out.println();
        }
        /*
        System.out.println("\n\nAnswer\n\n");
        for(int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                System.out.print(answer_right[i][j] + " ");
            }
            System.out.println();
        }*/
        
        
        // verificar grid total para ver se algum navio foi completado
        for(int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                // id 8 e id 7 =size 1
                // id 6 e id 5 = size 2
                // id 4 e id 3 = size 3
                // id 2 = size 4
                // id 1 = size 5
                boolean achou_algum_navio = false;
                if (answer_right[i][j] == 1) {
                    if (grid[i][j] == 8 || grid[i][j] == 7) {
                        System.out.println("Got here " + grid[i][j]);
                        ImageIcon icon = new javax.swing.ImageIcon(getClass().getResource("/imagens/uniqueShip1.jpg"));
                        // mudando para branco
                        // getSquare(i+1, j+1).setBackground(Color.WHITE);
                        // getSquare(i+1, j+1).setOpaque(true);
                        boolean entrou = false;
                        if (grid[i][j] == 8 && qtd_acertos < 1) {
                            entrou = true;
                            mover_barco(i, j);
                            qtd_acertos++;
                            answer_right[i][j] = 0;
                            nomeBarcos.setText(nomeBarcos.getText() + "Acertou\n");
                        } else {
                            getSquare(i+1, j+1).setIcon(icon);
                        }
                        
                        // atualizando número de navios encontrados do tipo 1
                        String quantidade = jLabelShip1.getText();
                        int qtd_atual = (quantidade.charAt(0) - '0') + 1;
                        if (entrou)
                            qtd_atual-=1;
                        if (qtd_atual <= 2)
                            jLabelShip1.setText(Integer.toString(qtd_atual) + "/2");
                        
                        // se não entrou é porque achou novamente o banco da criança
                        if(grid[i][j] == 7 || !entrou)
                            achou_algum_navio = true;
                    } else if (grid[i][j] == 6) {

                        // obtendo icones
                        ImageIcon icon1H = new javax.swing.ImageIcon(getClass().getResource("/imagens/uniqueShip2HF.jpg"));
                        ImageIcon icon2H = new javax.swing.ImageIcon(getClass().getResource("/imagens/uniqueShip2HB.jpg"));
                        ImageIcon icon1V = new javax.swing.ImageIcon(getClass().getResource("/imagens/uniqueShip2VF.jpg"));
                        ImageIcon icon2V = new javax.swing.ImageIcon(getClass().getResource("/imagens/uniqueShip2VB.jpg"));

                        // variavel para verificar se alterou o numero de navios achados, se sim, atualizar numero na tela
                        boolean alterou = false;
                        // verificando se o barco é horizontal para barco id 6
                        if (j + 1 < 8 && grid[i][j + 1] == 6 && answer_right[i][j + 1] == 1){
                            getSquare(i+1, j+1).setIcon(icon1H);
                            getSquare(i+1, j+2).setIcon(icon2H);
                            alterou = true;
                            
                        } else if (i + 1 < 8 && grid[i + 1][j] == 6 && answer_right[i + 1][j] == 1) {
                            // verificando se é vertical
                            getSquare(i+1, j+1).setIcon(icon1V);
                            getSquare(i+2, j+1).setIcon(icon2V);
                            alterou = true;
                        } 

                        if (alterou) {
                            achou_algum_navio = true;
                            // atualizando número de navios encontrados do tipo 2
                            String quantidade = jLabelShip2.getText();
                            int qtd_atual = (quantidade.charAt(0) - '0') + 1;
                            if (qtd_atual <= 2)
                                jLabelShip2.setText(Integer.toString(qtd_atual) + "/2");
                        }

                    } else if (grid[i][j] == 5) {

                        // obtendo icones
                        ImageIcon icon1H = new javax.swing.ImageIcon(getClass().getResource("/imagens/uniqueShip2HF.jpg"));
                        ImageIcon icon2H = new javax.swing.ImageIcon(getClass().getResource("/imagens/uniqueShip2HB.jpg"));
                        ImageIcon icon1V = new javax.swing.ImageIcon(getClass().getResource("/imagens/uniqueShip2VF.jpg"));
                        ImageIcon icon2V = new javax.swing.ImageIcon(getClass().getResource("/imagens/uniqueShip2VB.jpg"));

                        boolean alterou = false;
                        // verificando se o barco é horizontal para barco id 5
                        if (j + 1 < 8 && grid[i][j + 1] == 5 && answer_right[i][j + 1] == 1){
                            getSquare(i+1, j+1).setIcon(icon1H);
                            getSquare(i+1, j+2).setIcon(icon2H);
                            alterou = true;
                        } else if (i + 1 < 8 && grid[i + 1][j] == 5 && answer_right[i + 1][j] == 1) {
                            // verificando se é vertical
                            getSquare(i+1, j+1).setIcon(icon1V);
                            getSquare(i+2, j+1).setIcon(icon2V);
                            alterou = true;
                        }

                        if (alterou) {
                            achou_algum_navio = true;
                            // atualizando número de navios encontrados do tipo 2
                            String quantidade = jLabelShip2.getText();
                            int qtd_atual = (quantidade.charAt(0) - '0') + 1;
                            if (qtd_atual <= 2)
                                jLabelShip2.setText(Integer.toString(qtd_atual) + "/2");
                        }

                    } else if (grid[i][j] == 4) {
                        // obtendo icones
                        ImageIcon icon1H = new javax.swing.ImageIcon(getClass().getResource("/imagens/uniqueShip3HF.jpg"));
                        ImageIcon icon2H = new javax.swing.ImageIcon(getClass().getResource("/imagens/uniqueShip3HM.jpg"));
                        ImageIcon icon3H = new javax.swing.ImageIcon(getClass().getResource("/imagens/uniqueShip3HB.jpg"));
                        ImageIcon icon1V = new javax.swing.ImageIcon(getClass().getResource("/imagens/uniqueShip3VF.jpg"));
                        ImageIcon icon2V = new javax.swing.ImageIcon(getClass().getResource("/imagens/uniqueShip3VM.jpg"));
                        ImageIcon icon3V = new javax.swing.ImageIcon(getClass().getResource("/imagens/uniqueShip3VB.jpg"));

                        boolean alterou = false;
                        // verificando se o barco é horizontal para id 4
                        if (j + 1 < 8 && grid[i][j + 1] == 4 && j + 2 < 8 && grid[i][j + 2] == 4 &&
                                answer_right[i][j + 1] == 1 && answer_right[i][j + 2] == 1){
                            // começou pelo inicio
                            getSquare(i+1, j+1).setIcon(icon1H);
                            getSquare(i+1, j+2).setIcon(icon2H);
                            getSquare(i+1, j+3).setIcon(icon3H);
                            alterou = true;
                        } else if (i + 1 < 8 && grid[i + 1][j] == 4 && i + 2 < 8 && grid[i + 2][j] == 4 &&
                                answer_right[i + 1][j] == 1 && answer_right[i + 2][j] == 1){
                            // verificando vertical
                            // começou pelo inicio
                            getSquare(i+1, j+1).setIcon(icon1V);
                            getSquare(i+2, j+1).setIcon(icon2V);
                            getSquare(i+3, j+1).setIcon(icon3V);
                            alterou = true;
                        } 

                        if (alterou) {
                            achou_algum_navio = true;
                            // atualizando número de navios encontrados do tipo 3
                            String quantidade = jLabelShip3.getText();
                            int qtd_atual = (quantidade.charAt(0) - '0') + 1;
                            if (qtd_atual <= 2)
                                jLabelShip3.setText(Integer.toString(qtd_atual) + "/2");
                        }

                    } else if (grid[i][j] == 3) {
                        // obtendo icones
                        ImageIcon icon1H = new javax.swing.ImageIcon(getClass().getResource("/imagens/uniqueShip3HF.jpg"));
                        ImageIcon icon2H = new javax.swing.ImageIcon(getClass().getResource("/imagens/uniqueShip3HM.jpg"));
                        ImageIcon icon3H = new javax.swing.ImageIcon(getClass().getResource("/imagens/uniqueShip3HB.jpg"));
                        ImageIcon icon1V = new javax.swing.ImageIcon(getClass().getResource("/imagens/uniqueShip3VF.jpg"));
                        ImageIcon icon2V = new javax.swing.ImageIcon(getClass().getResource("/imagens/uniqueShip3VM.jpg"));
                        ImageIcon icon3V = new javax.swing.ImageIcon(getClass().getResource("/imagens/uniqueShip3VB.jpg"));

                        boolean alterou = false;
                        // verificando se o barco é horizontal para id 3
                        if (j + 1 < 8 && grid[i][j + 1] == 3 && j + 2 < 8 && grid[i][j + 2] == 3 &&
                                answer_right[i][j + 1] == 1 && answer_right[i][j + 2] == 1){
                            // começou pelo inicio
                            getSquare(i+1, j+1).setIcon(icon1H);
                            getSquare(i+1, j+2).setIcon(icon2H);
                            getSquare(i+1, j+3).setIcon(icon3H);
                            alterou = true;
                        } else if (i + 1 < 8 && grid[i + 1][j] == 3 && i + 2 < 8 && grid[i + 2][j] == 3 &&
                                answer_right[i + 1][j] == 1 && answer_right[i + 2][j] == 1){
                            // verificando vertical
                            // começou pelo inicio
                            getSquare(i+1, j+1).setIcon(icon1V);
                            getSquare(i+2, j+1).setIcon(icon2V);
                            getSquare(i+3, j+1).setIcon(icon3V);
                            alterou = true;
                        } 
                        if (alterou) {
                            achou_algum_navio = true;
                            // atualizando número de navios encontrados do tipo 3
                            String quantidade = jLabelShip3.getText();
                            int qtd_atual = (quantidade.charAt(0) - '0') + 1;
                            if (qtd_atual <= 2)
                                jLabelShip3.setText(Integer.toString(qtd_atual) + "/2");
                        }
                    } else if (grid[i][j] == 2) {
                        // obtendo icones
                        ImageIcon icon1H = new javax.swing.ImageIcon(getClass().getResource("/imagens/uniqueShip4hf.jpg"));
                        ImageIcon icon2H = new javax.swing.ImageIcon(getClass().getResource("/imagens/uniqueShip4HM1.jpg"));
                        ImageIcon icon3H = new javax.swing.ImageIcon(getClass().getResource("/imagens/uniqueShip4HM2.jpg"));
                        ImageIcon icon4H = new javax.swing.ImageIcon(getClass().getResource("/imagens/uniqueShip4HB.jpg"));

                        ImageIcon icon1V = new javax.swing.ImageIcon(getClass().getResource("/imagens/uniqueship4vf.jpg"));
                        ImageIcon icon2V = new javax.swing.ImageIcon(getClass().getResource("/imagens/uniqueship4vm1.jpg"));
                        ImageIcon icon3V = new javax.swing.ImageIcon(getClass().getResource("/imagens/uniqueship4vm2.jpg"));
                        ImageIcon icon4V = new javax.swing.ImageIcon(getClass().getResource("/imagens/uniqueship4Vb.jpg"));

                        boolean alterou = false;
                        // verificando se o barco é horizontal
                        if (j + 1 < 8 && grid[i][j + 1] == 2 && j + 2 < 8 && grid[i][j + 2] == 2 
                                && j + 3 < 8 && grid[i][j + 3] == 2 && answer_right[i][j + 1] == 1 
                                && answer_right[i][j + 2] == 1 && answer_right[i][j + 3] == 1){
                            // começou pelo inicio
                            getSquare(i+1, j+1).setIcon(icon1H);
                            getSquare(i+1, j+2).setIcon(icon2H);
                            getSquare(i+1, j+3).setIcon(icon3H);
                            getSquare(i+1, j+4).setIcon(icon4H);
                            alterou = true;
                        } else if (i + 1 < 8 && grid[i+1][j] == 2 && i + 2 < 8 && grid[i+2][j] == 2 
                                && i + 3 < 8 && grid[i+3][j] == 2 &&
                                answer_right[i + 1][j] == 1 && answer_right[i + 2][j] == 1 
                                && answer_right[i + 3][j] == 1){
                            // verificando vertical
                            // começou pelo inicio
                            getSquare(i+1, j+1).setIcon(icon1V);
                            getSquare(i+2, j+1).setIcon(icon2V);
                            getSquare(i+3, j+1).setIcon(icon3V);
                            getSquare(i+4, j+1).setIcon(icon4V);
                            alterou = true;
                        } 

                        if (alterou) {
                            achou_algum_navio = true;
                            // atualizando número de navios encontrados do tipo 4
                            String quantidade = jLabelShip4.getText();
                            int qtd_atual = (quantidade.charAt(0) - '0') + 1;
                            if (qtd_atual <= 1)
                                jLabelShip4.setText(Integer.toString(qtd_atual) + "/1");
                        }
                    } else if (grid[i][j] == 1) {
                        // obtendo icones
                        ImageIcon icon1H = new javax.swing.ImageIcon(getClass().getResource("/imagens/uniqueShip5HF.jpg"));
                        ImageIcon icon2H = new javax.swing.ImageIcon(getClass().getResource("/imagens/uniqueShip5HM1.jpg"));
                        ImageIcon icon3H = new javax.swing.ImageIcon(getClass().getResource("/imagens/uniqueShip5HM2.jpg"));
                        ImageIcon icon4H = new javax.swing.ImageIcon(getClass().getResource("/imagens/uniqueShip5HM3.jpg"));
                        ImageIcon icon5H = new javax.swing.ImageIcon(getClass().getResource("/imagens/uniqueShip5HB.jpg"));

                        ImageIcon icon1V = new javax.swing.ImageIcon(getClass().getResource("/imagens/uniqueShip5VF.jpg"));
                        ImageIcon icon2V = new javax.swing.ImageIcon(getClass().getResource("/imagens/uniqueShip5VM1.jpg"));
                        ImageIcon icon3V = new javax.swing.ImageIcon(getClass().getResource("/imagens/uniqueShip5VM2.jpg"));
                        ImageIcon icon4V = new javax.swing.ImageIcon(getClass().getResource("/imagens/uniqueShip5VM3.jpg"));
                        ImageIcon icon5V = new javax.swing.ImageIcon(getClass().getResource("/imagens/uniqueShip5VB.jpg"));

                        boolean alterou = false;
                        // verificando se o barco é horizontal
                        if (j + 1 < 8 && grid[i][j + 1] == 1 && j + 2 < 8 && grid[i][j + 2] == 1 
                                && j + 3 < 8 && grid[i][j + 3] == 1 && j + 4 < 8 && grid[i][j + 4] == 1 
                                && answer_right[i][j + 1] == 1 && answer_right[i][j + 2] == 1 
                                && answer_right[i][j + 3] == 1 && answer_right[i][j + 4] == 1){
                            // começou pelo inicio
                            getSquare(i+1, j+1).setIcon(icon1H);
                            getSquare(i+1, j+2).setIcon(icon2H);
                            getSquare(i+1, j+3).setIcon(icon3H);
                            getSquare(i+1, j+4).setIcon(icon4H);
                            getSquare(i+1, j+5).setIcon(icon5H);
                            alterou = true;
                        } else if (i + 1 < 8 && grid[i+1][j] == 1 && i + 2 < 8 && grid[i+2][j] == 1 
                                && i + 3 < 8 && grid[i+3][j] == 1 && i + 4 < 8 && grid[i+4][j] == 1 && 
                                answer_right[i + 1][j] == 1 && answer_right[i + 2][j] == 1 
                                && answer_right[i + 3][j] == 1 && answer_right[i + 4][j] == 1){
                            // verificando vertical
                            // começou pelo inicio
                            getSquare(i+1, j+1).setIcon(icon1V);
                            getSquare(i+2, j+1).setIcon(icon2V);
                            getSquare(i+3, j+1).setIcon(icon3V);
                            getSquare(i+4, j+1).setIcon(icon4V);
                            getSquare(i+5, j+1).setIcon(icon5V);   
                            alterou = true;
                        }

                        if (alterou) {
                            achou_algum_navio = true;
                            // atualizando número de navios encontrados do tipo 3
                            String quantidade = jLabelShip5.getText();
                            int qtd_atual = (quantidade.charAt(0) - '0') + 1;
                            if (qtd_atual <= 1)
                                jLabelShip5.setText(Integer.toString(qtd_atual) + "/1");
                        }
                    }
                }
                
                // alterando answer_right[i][j] para 2, assim não será contabilizado novamente esse navio
                if (achou_algum_navio) {
                    answer_right[i][j] = 2;
                    // inserindo nome dos barcos 
                    if (grid[i][j] == 1) {
                        nomeBarcos.setText(nomeBarcos.getText() + "Kit Alimentação\n");
                    } else if (grid[i][j] == 2) {
                        nomeBarcos.setText(nomeBarcos.getText() + "Banheira\n");
                    } else if (grid[i][j] == 3) {
                        nomeBarcos.setText(nomeBarcos.getText() + "Fralda\n");
                    } else if (grid[i][j] == 4) {
                        nomeBarcos.setText(nomeBarcos.getText() + "Kit higiene\n");
                    } else if (grid[i][j] == 5) {
                        nomeBarcos.setText(nomeBarcos.getText() + "Roupinha\n");
                    } else if (grid[i][j] == 6) {
                        nomeBarcos.setText(nomeBarcos.getText() + "Brinquedo\n");
                    } else if (grid[i][j] == 7) {
                        nomeBarcos.setText(nomeBarcos.getText() + "Sapatinho\n");
                    } else if (grid[i][j] == 8) {
                        // nomeBarcos.setText(nomeBarcos.getText() + "Criança X\n");
                        JLabel kid = new JLabel("Isis");
                        kid.setFont(new Font("Arial", Font.BOLD, 40));
                        kid.setHorizontalAlignment(SwingConstants.CENTER);
                        JOptionPane.showMessageDialog(this, kid, "Alerta", JOptionPane.PLAIN_MESSAGE);
                    }
                    break;
                }
            }  
        }
    }
    
    // função para mover o barco, recebe como paramentro posição atual para não posiciona-lo nessa posição novamente
    public void mover_barco(int i, int j) {
        grid[i][j] = 0; // retirar barco da posição atual
        Random r = new Random();
        int posx, posy;
        
        while(true) {
            // 0 a 7 
            posx = r.nextInt(8) + 1;
            posy = r.nextInt(8) + 1;
           
            System.out.println("Posx: " + posx + " Posy: " + posy);
            // supondo ser horizontal e o desenho não é feito de traz para frente
            // não posicionar muito proximo de outro navio  
            // posx - 2 = acima, posy = direita, posx= abaixo, posy - 2 = esquerda
            if ((((posy - 1) != j || (posx - 1) != i) && grid[posx-1][posy-1] == 0)) {
                grid[posx-1][posy-1] = 8;
                break;
            }
        } 
        
        
        // preciso reinicializar todos os quadrados que já foram virados e não tinha barco
        for(int k = 0; k < 8; k++) {
            for (int l = 0; l < 8; l++) {
                JLabel square = getSquare(k+1, l+1);
                if (square.getText().equals("X") || k == i && l == j) {
                    // remover x e atualizar cor
                    square.setText("");
                    square.setBackground(new Color(214, 217, 223));
                }
            }
        }
    }
    
    // metodo para desenhar ships aleatoriamente
    public void drawShips() {
        // 8 ships: 2 size 1, 2 size 2, 2 size 3, 1 size 4 e 1 size 5
        Random r = new Random();
        int posx, posy;
        boolean horizontal;
        
        // para 8 navios, size representa o tamanho do navio, começando por 5
        int qtdShips = 0, size = 5;
        
        Color cor = Color.WHITE;
        
        while(qtdShips < 8) {
            int shipTypeQTD = 0;
            
            // para definir que para o tamanho 5 e 4 havera somente 1 navio, dois para os tamanhos restantes
            if (size == 5 || size == 4) {
                shipTypeQTD = 1;
            } else {
                shipTypeQTD = 2;
            }
            
            
            // desenhar quantidade de navio por tipo
            while(shipTypeQTD > 0) {
                horizontal = false;
                // inicio da coluna ou linha valido para cada tamanho
                int referencia_pos = size == 5 ? 4 : size == 4 ? 5 : size == 3 ? 6 : size == 2 ? 7 : 8;
                while(true) {
                    posx = r.nextInt(8) + 1;
                    posy = r.nextInt(8) + 1;

                    // supondo ser horizontal e o desenho não é feito de traz para frente
                    if (posy <= referencia_pos && emptySpaceH(posx, posy, size)) {
                        horizontal = true;
                        break;
                    } else if (posx <= referencia_pos && emptySpaceV(posx, posy, size)) {
                        break;
                    }
                }
                
                // para desenhar uma navio de cada cor
                if (qtdShips == 7)
                    cor = Color.GREEN;
                else if (qtdShips == 6)
                    cor = Color.RED;
                else if (qtdShips == 5)
                    cor = Color.BLUE;
                else if (qtdShips == 4)
                    cor = Color.YELLOW;
                else if (qtdShips == 3)
                    cor = Color.WHITE;
                else if (qtdShips == 2)
                    cor = Color.BLACK;
                else if (qtdShips == 1)
                    cor = Color.ORANGE;
                else if (qtdShips == 0)
                    cor = Color.PINK;
                
                // ship tamanho size será desenhado horizontalmente desde posy, na posição posx
                // qtdShips + 1 para evitar index out of bound, já que é contado de 1 até 8
                if (horizontal) {
                    drawHorizontal(posx, posy, size, cor, qtdShips+1);
                } else {
                    // ou verticalmente na coluna posy desde a posição posx
                    drawVertical(posx, posy, size, cor, qtdShips+1);
                }
                // aumentando quantidade de navios desenhados e também decrementando a quantidade do tipo atual
                qtdShips++;
                shipTypeQTD--;
            }
            // decrementando os tamanhos dos navios
            size--;
        }
    }
    
    // metodo para verificar se o espaco horizontal esta vazio para posicionar o navio
    public boolean emptySpaceH(int posx, int posy, int size){
        for (int i = 0; i < size; i++) {
            // encontrando alguma posicao horizontalmente que nao esteja vazia, ja retorna falso
            // se acima ou abaixo do local candidato houver algum navio, proibir colocar aí
            if ((grid[posx-1][(posy - 1)+i] != 0) || 
                (posx - 2 >= 0 && grid[posx-2][(posy - 1)+i] != 0) ||
                (posx < 8 && grid[posx][(posy - 1)+i] != 0))
                return false;
        }
        
        // se na posição anterior ou apos ao local candidato houver uma parte de outro navio, proibir
        if ((posy - 2 >= 0 && grid[posx - 1][posy - 2] != 0) ||
            (posy + size - 1 < 8 && grid[posx - 1][posy + size - 1] != 0))
            return false;
        return true;
    }
    
    public boolean emptySpaceV(int posx,int posy, int size){
        for (int i = 0; i < size; i++) {
            // encontrando alguma posicao verticalmente que nao esteja vazia, ja retorna falso
            // se de um lado ou do outro do local candidato houver algum navio, proibir colocar aí
            if ((grid[(posx-1)+i][posy-1] != 0) || 
                (posy - 2 >= 0 && grid[(posx-1)+i][posy - 2] != 0) ||
                (posy < 8 && grid[(posx-1)+i][posy] != 0))
                return false;
        }
        // se na posição acima ou abaixo do local candidato houver uma parte de outro navio, proibir
        if ((posx - 2 >= 0 && grid[posx - 2][posy - 1] != 0) ||
            (posx + size - 1 < 8 && grid[posx + size - 1][posy - 1] != 0))
            return false;
        
        return true;
    }
    // metodo que retorna label referente ao quadrado
    public JLabel getSquare(int posx, int posy) {
        switch(posx) {
            case 1:
                if (posy == 1)
                    return squareA1;
                else if (posy == 2) 
                    return squareA2;
                else if (posy == 3)
                    return squareA3;
                else if (posy == 4)
                    return squareA4;
                else if (posy == 5)
                    return squareA5;
                else if (posy == 6)
                    return squareA6;
                else if (posy == 7)
                    return squareA7;
                else if (posy == 8) 
                    return squareA8;
                break;
            case 2:
                if (posy == 1)
                    return squareB1;
                else if (posy == 2) 
                    return squareB2;
                else if (posy == 3)
                    return squareB3;
                else if (posy == 4)
                    return squareB4;
                else if (posy == 5)
                    return squareB5;
                else if (posy == 6)
                    return squareB6;
                else if (posy == 7)
                    return squareB7;
                else if (posy == 8) 
                    return squareB8;
                break;
            case 3:
                if (posy == 1)
                    return squareC1;
                else if (posy == 2) 
                    return squareC2;
                else if (posy == 3)
                    return squareC3;
                else if (posy == 4)
                    return squareC4;
                else if (posy == 5)
                    return squareC5;
                else if (posy == 6)
                    return squareC6;
                else if (posy == 7)
                    return squareC7;
                else if (posy == 8) 
                    return squareC8;
                break;
            case 4:
                if (posy == 1)
                    return squareD1;
                else if (posy == 2) 
                    return squareD2;
                else if (posy == 3)
                    return squareD3;
                else if (posy == 4)
                    return squareD4;
                else if (posy == 5)
                    return squareD5;
                else if (posy == 6)
                    return squareD6;
                else if (posy == 7)
                    return squareD7;
                else if (posy == 8) 
                    return squareD8;
                break;
            case 5:
                if (posy == 1)
                    return squareE1;
                else if (posy == 2) 
                    return squareE2;
                else if (posy == 3)
                    return squareE3;
                else if (posy == 4)
                    return squareE4;
                else if (posy == 5)
                    return squareE5;
                else if (posy == 6)
                    return squareE6;
                else if (posy == 7)
                    return squareE7;
                else if (posy == 8) 
                    return squareE8;
                break;
            case 6:
                if (posy == 1)
                    return squareF1;
                else if (posy == 2) 
                    return squareF2;
                else if (posy == 3)
                    return squareF3;
                else if (posy == 4)
                    return squareF4;
                else if (posy == 5)
                    return squareF5;
                else if (posy == 6)
                    return squareF6;
                else if (posy == 7)
                    return squareF7;
                else if (posy == 8) 
                    return squareF8;
                break;
            case 7:
                if (posy == 1)
                    return squareG1;
                else if (posy == 2) 
                    return squareG2;
                else if (posy == 3)
                    return squareG3;
                else if (posy == 4)
                    return squareG4;
                else if (posy == 5)
                    return squareG5;
                else if (posy == 6)
                    return squareG6;
                else if (posy == 7)
                    return squareG7;
                else if (posy == 8) 
                    return squareG8;
                break;
            case 8:
                if (posy == 1)
                    return squareH1;
                else if (posy == 2) 
                    return squareH2;
                else if (posy == 3)
                    return squareH3;
                else if (posy == 4)
                    return squareH4;
                else if (posy == 5)
                    return squareH5;
                else if (posy == 6)
                    return squareH6;
                else if (posy == 7)
                    return squareH7;
                else if (posy == 8) 
                    return squareH8;
                break;
        }
        return null;
    }
    
    public void drawHorizontal(int posx, int posy, int size, Color cor, int idShip) {
        for(int i = 0; i < size; i++) {
            getSquare(posx,posy+i).setBackground(cor);
            // getSquare(posx,posy+i).setOpaque(true);
            // especificando o tipo de barco no grid
            grid[posx-1][(posy-1)+i] = idShip;
        }
    }
    
    public void drawVertical(int posx, int posy, int size, Color cor, int idShip) {
        for(int i = 0; i < size; i++) {
            getSquare(posx+i,posy).setBackground(cor);
            //getSquare(posx+i,posy).setOpaque(true);
            // especificando o tipo de barco no grid
            grid[(posx-1)+i][posy-1] = idShip;
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Canvas canvas1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelShip1;
    private javax.swing.JLabel jLabelShip2;
    private javax.swing.JLabel jLabelShip3;
    private javax.swing.JLabel jLabelShip4;
    private javax.swing.JLabel jLabelShip5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton jbRetornar;
    private java.awt.TextArea nomeBarcos;
    private javax.swing.JLabel squareA1;
    private javax.swing.JLabel squareA2;
    private javax.swing.JLabel squareA3;
    private javax.swing.JLabel squareA4;
    private javax.swing.JLabel squareA5;
    private javax.swing.JLabel squareA6;
    private javax.swing.JLabel squareA7;
    private javax.swing.JLabel squareA8;
    private javax.swing.JLabel squareB1;
    private javax.swing.JLabel squareB2;
    private javax.swing.JLabel squareB3;
    private javax.swing.JLabel squareB4;
    private javax.swing.JLabel squareB5;
    private javax.swing.JLabel squareB6;
    private javax.swing.JLabel squareB7;
    private javax.swing.JLabel squareB8;
    private javax.swing.JLabel squareC1;
    private javax.swing.JLabel squareC2;
    private javax.swing.JLabel squareC3;
    private javax.swing.JLabel squareC4;
    private javax.swing.JLabel squareC5;
    private javax.swing.JLabel squareC6;
    private javax.swing.JLabel squareC7;
    private javax.swing.JLabel squareC8;
    private javax.swing.JLabel squareD1;
    private javax.swing.JLabel squareD2;
    private javax.swing.JLabel squareD3;
    private javax.swing.JLabel squareD4;
    private javax.swing.JLabel squareD5;
    private javax.swing.JLabel squareD6;
    private javax.swing.JLabel squareD7;
    private javax.swing.JLabel squareD8;
    private javax.swing.JLabel squareE1;
    private javax.swing.JLabel squareE2;
    private javax.swing.JLabel squareE3;
    private javax.swing.JLabel squareE4;
    private javax.swing.JLabel squareE5;
    private javax.swing.JLabel squareE6;
    private javax.swing.JLabel squareE7;
    private javax.swing.JLabel squareE8;
    private javax.swing.JLabel squareF1;
    private javax.swing.JLabel squareF2;
    private javax.swing.JLabel squareF3;
    private javax.swing.JLabel squareF4;
    private javax.swing.JLabel squareF5;
    private javax.swing.JLabel squareF6;
    private javax.swing.JLabel squareF7;
    private javax.swing.JLabel squareF8;
    private javax.swing.JLabel squareG1;
    private javax.swing.JLabel squareG2;
    private javax.swing.JLabel squareG3;
    private javax.swing.JLabel squareG4;
    private javax.swing.JLabel squareG5;
    private javax.swing.JLabel squareG6;
    private javax.swing.JLabel squareG7;
    private javax.swing.JLabel squareG8;
    private javax.swing.JLabel squareH1;
    private javax.swing.JLabel squareH2;
    private javax.swing.JLabel squareH3;
    private javax.swing.JLabel squareH4;
    private javax.swing.JLabel squareH5;
    private javax.swing.JLabel squareH6;
    private javax.swing.JLabel squareH7;
    private javax.swing.JLabel squareH8;
    // End of variables declaration//GEN-END:variables
}
